import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState } from 'react';
/* 
  Algoritmo qye solicite n cantidad de numeros, una vez los haya solicitado, 
  los valores deben ser almacenados en una estructura de datos cola.
  Posteriormente, se debe buscar el promedio de los numeros ingresados.

  1. Solicitar n cantidad de numeros
  2. Almacenar los numeros en una estructura de datos cola
  3. Buscar el promedio de los numeros ingresados
*/

export default function Home() {

  //Input para ingresar un número que sea el tamaño del array
  const [numero, setNumero] = useState(0); //Tamaño del array, Línea 17:1 operación de declaración y asignación de variable de estado.
  //Cola
  const [cola, setCola] = useState<number[]>([]); //Cola, Línea 19: 1 operaciones de declaración y asignación de variables de estado.//
  // Promedio
  const [promedios, setPromedios] = useState(0); //Promedio, Línea 21: 1 operaciones de declaración y asignación de variables de estado.//


  //1. Crear un input para ingresar un número que sea el tamaño del array
  const handleChange = (e:any) => {
    setNumero(Number(e.target.value)); //Línea 26: 1 operación de asignación de variable de estado.
  };
  
  //2. Almacernar los numeros en una estructura de datos cola
  class Queue<T> {
    public elements: T[] = []; //Línea 31: 1 operación de declaración y asignación de variable.
    
    //Poner en la cola
    enqueue(element: T): void {
      this.elements.push(element); //Línea 35: 1 operación poner en la cola, invocación.
    }
    
    //Sacar de cola 
    dequeue(): T | undefined {
      return this.elements.shift(); //Línea 40: 1 operación sacar de la cola, invocación.
    }
    
    // Esta vacio 
    isEmpty(): boolean {
      return this.elements.length === 0; //Línea 45: 1 operación de comparación, invocacion. 
    }
  }
  
  //3. Buscar el promedio de los numeros ingresados
  const promedio = (cola: number[]) => {
    let suma = 0; //Línea 51: 1 operación de declaración y asignación de variable.
    for (let i = 0; i < cola.length; i++) { //Línea 52: 1 operacion incremental, asignación de variable , < , invocacion  .
      suma += cola[i]; //Línea 53: 1 operación de asignación de variable , += .
    }
    return suma / cola.length; //Línea 55: 1 operación de asignación de variable, invocacion, /.
  };


  //4. Imprimir la cola en pantalla
  const imprimirCola = () => {
    /*
    Línea 68: 1 operación - llamada al método "Array.map()".
    Línea 68: 2 operaciones - declaración y asignación de variable, y creación de un elemento "li".
    Línea 68: 1 operación - asignación del valor del elemento "li".
    Línea 68: 1 operación - asignación de una clave única al elemento "li".
    En total, 5 operaciones por cada iteración del método "map()".
    */
    return cola.map((numero, index) => {
      return <li key={index}>{numero}</li>;
    });
  };

  // Desencolar todos los elementos de la cola y mostrarlos en pantalla
  const handleClick = () => {
    const queue = new Queue<number>(); //Línea 75: 1 operación de declaración y asignación de variable, invocacion.
    for (let i = 0; i < numero; i++) { //Línea 76: 1 operacion incremental, asignación de variable , < , invocacion.
      const numero = Number(prompt(`Ingrese el numero ${i + 1}`)); //Línea 77: 1 operación de asignación de variable, invocacion, +, Number.
      queue.enqueue(numero); //Línea 78: 1 operación de asignación de variable, invocacion.
    }
    let colaDesencolada: number[] = []; //Línea 80: 1 operación de declaración y asignación de variable.
    while (!queue.isEmpty()) { //Línea 81: 1 operación de asignación de variable, invocacion, !.
      colaDesencolada.push(queue.dequeue()!); //Línea 82: 1 operación de asignación de variable, invocacion, !, push.
    }
    setCola(colaDesencolada); //Línea 84: 1 operación de asignación de variable de estado.
    setPromedios(promedio(colaDesencolada)); //Línea 85: 1 operación de asignación de variable de estado.
  };

  return (
    <>
    <Head>
      <title>Estructura de datos cola numeros agregados a una cola y buscamos su promedio</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className={styles.main}>
      <div className={styles.description}>
        <p>
          Para ver el codigo del programa&nbsp;
          <code className={styles.code}>src/pages/index.tsx</code>
        </p>
      </div>

      <div className={styles.main}>
        <h1 className={styles.h1}>
          Algoritmo numeros agregados a una cola y buscamos su promedio
        </h1>
        <p className={styles.p}>
          El usuario determina el tamaño del arreglo y el programa genera una
          ventana emergente para que el usuario ingrese los numeros hasta
          llenar el array en la cola con el tamaño ingresado. Una vez lleno el arreglo,
          el programa saca el promedio de los numeros ingresados.
        </p>
        {/* 1.Crear un input para ingresar un número que sea el tamaño del array */}
        {/* Tamaño del arreglo: */}
        <label htmlFor="numero" className={styles.h1}>Tamaño del arreglo:</label>
        <input
          type="number"
          name="numero"
          id="numero"
          className={styles.input}
          onChange={handleChange}
        />
        <p className={styles.p}>
          Cuando ingrese el tamaño ejecute el boton generar el arreglo este
          desplega una ventana emergente para llenar el tamaño del arreglo con
          los numeros que le ingreses.
        </p>
        {/* 2.Crear un botón que al hacer click genere un array con numeros con el tamaño del input anterior */}
        <button onClick={handleClick} className={styles.button}>Generar array</button>
        {/* 3.el promedio de los numeros ingresados */}
        <p className={styles.p}>El promedio de los numeros ingresados es:{promedios}</p>
        {/* 4. Imprimir la cola en pantalla */}
        <ul className={styles.ul}>{imprimirCola()}</ul>
      </div>
    </main>
  </>
  )
}
